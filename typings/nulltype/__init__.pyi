"""
This type stub file was generated by pyright.
"""

import sys

_PY2 = ...
__all__ = "NullType NonNullType Null Nothing Empty".split()
class NullType:
    """
    A 'null' type different from, but parallel to, None. Core function
    is representing emptyness in a way that doesn't overload None.
    This helps create designated identifiers with specific meanings
    such as Passthrough, Prohibited, and Undefined.

    Instantiate to create desired null singletons. While they are
    singletons, depends on usage convention rather than strict
    enforcement to maintain their singleton-ness. This is a problem
    roughly 0% of the time.
    """
    def __init__(self, name) -> None:
        ...
    
    def __repr__(self): # -> Any:
        ...
    
    if _PY2:
        def __nonzero__(self): # -> Literal[False]:
            """I am always False."""
            ...
        
    else:
        def __bool__(self): # -> Literal[False]:
            """I am always False."""
            ...
        
    def __iter__(self): # -> Iterator[Any]:
        ...
    
    def __len__(self): # -> Literal[0]:
        ...
    
    def __getitem__(self, index): # -> Self:
        ...
    
    def __getattr__(self, name): # -> Self:
        ...
    
    def __setitem__(self, name, value): # -> None:
        ...
    
    def __setattr__(self, name, value): # -> None:
        ...
    
    def __call__(self, *args, **kwargs): # -> Self:
        ...
    


Null = ...
Nothing = ...
Empty = ...
class NonNullType:
    """
    Like NullType, but truthy not falsey. Could be a subclass of NullType;
    while that would provide a tiny bit more code reuse, NonNullType as
    as NullType is ontologically suspect.
    """
    def __init__(self, name) -> None:
        ...
    
    def __repr__(self): # -> Any:
        ...
    
    if _PY2:
        def __nonzero__(self): # -> Literal[True]:
            """I am always True."""
            ...
        
    else:
        def __bool__(self): # -> Literal[True]:
            """I am always True."""
            ...
        
    def __iter__(self): # -> Iterator[Self]:
        """I always contain something. Myself. Beware recursion on this!"""
        ...
    
    def __len__(self): # -> Literal[1]:
        ...
    
    def __getitem__(self, index): # -> Self:
        ...
    
    def __getattr__(self, name): # -> Self:
        ...
    
    def __setitem__(self, name, value): # -> None:
        ...
    
    def __setattr__(self, name, value): # -> None:
        ...
    
    def __call__(self, *args, **kwargs): # -> Self:
        ...
    


