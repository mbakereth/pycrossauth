"""
This type stub file was generated by pyright.
"""

import unittest

jwe_algs_and_rsa1_5 = ...
PublicKeys = ...
PrivateKeys = ...
SymmetricKeys = ...
Useofx5c = ...
RSAPrivateKey = ...
RSAPrivatePEM = ...
RSAPrivatePassword = ...
RSAPublicPEM = ...
PublicCert = ...
PublicCertThumbprint = ...
PublicKeys_EdDsa = ...
PrivateKeys_EdDsa = ...
PublicKeys_secp256k1 = ...
PrivateKeys_secp256k1 = ...
PublicKeys_brainpool = ...
PrivateKeys_brainpool = ...
Ed25519PrivatePEM = ...
Ed25519PublicPEM = ...
X25519PrivatePEM = ...
X25519PublicPEM = ...
ECPublicPEM = ...
ECPublicJWK = ...
X25519PublicJWK = ...
class TestJWK(unittest.TestCase):
    def test_create_pubKeys(self): # -> None:
        ...
    
    def test_create_priKeys(self): # -> None:
        ...
    
    def test_create_symKeys(self): # -> None:
        ...
    
    def test_generate_keys(self): # -> None:
        ...
    
    def test_export_public_keys(self): # -> None:
        ...
    
    def test_generate_oct_key(self): # -> None:
        ...
    
    def test_generate_EC_key(self): # -> None:
        ...
    
    def test_generate_OKP_keys(self): # -> None:
        ...
    
    def test_import_pyca_keys(self): # -> None:
        ...
    
    def test_jwk_from_json(self): # -> None:
        ...
    
    def test_jwkset(self): # -> None:
        ...
    
    def test_jwkset_get_keys(self): # -> None:
        ...
    
    def test_jwkset_issue_208(self): # -> None:
        ...
    
    def test_thumbprint(self): # -> None:
        ...
    
    def test_import_from_pem(self): # -> None:
        ...
    
    def test_import_ec_from_pem(self): # -> None:
        ...
    
    def test_import_x25519_from_pem(self): # -> None:
        ...
    
    def test_export_symmetric(self): # -> None:
        ...
    
    def test_export_public(self): # -> None:
        ...
    
    def test_export_private(self): # -> None:
        ...
    
    def test_export_as_dict(self): # -> None:
        ...
    
    def test_public(self): # -> None:
        ...
    
    def test_invalid_value(self): # -> None:
        ...
    
    def test_create_pubKeys_eddsa(self): # -> None:
        ...
    
    def test_create_priKeys_eddsa(self): # -> None:
        ...
    
    def test_create_pubKeys_secp256k1(self): # -> None:
        ...
    
    def test_create_priKeys_secp256k1(self): # -> None:
        ...
    
    def test_create_pubKeys_brainpool(self): # -> None:
        ...
    
    def test_create_priKeys_brainpool(self): # -> None:
        ...
    
    def test_thumbprint_eddsa(self): # -> None:
        ...
    
    def test_pem_okp(self): # -> None:
        ...
    
    def test_jwk_as_dict(self): # -> None:
        ...
    
    def test_jwk_from_password(self): # -> None:
        ...
    
    def test_p256k_alias(self): # -> None:
        ...
    
    def test_thumbprint_uri(self): # -> None:
        ...
    


A1_protected = ...
A1_payload = ...
A1_signature = ...
A1_example = ...
A2_protected = ...
A2_payload = ...
A2_key = ...
A2_signature = ...
A2_example = ...
A3_protected = ...
A3_payload = ...
A3_key = ...
A3_signature = ...
A3_example = ...
A4_protected = ...
A4_payload = ...
A4_key = ...
A4_signature = ...
A4_example = ...
A5_protected = ...
A5_payload = ...
A5_key = ...
A5_signature = ...
A5_example = ...
A6_serialized = ...
A6_example = ...
A7_example = ...
E_negative = ...
customhdr_jws_example = ...
class TestJWS(unittest.TestCase):
    def check_sign(self, test): # -> None:
        ...
    
    def test_A1(self): # -> None:
        ...
    
    def test_A2(self): # -> None:
        ...
    
    def test_A3(self): # -> None:
        ...
    
    def test_A4(self): # -> None:
        ...
    
    def test_A5(self): # -> None:
        ...
    
    def test_A6(self): # -> None:
        ...
    
    def test_A7(self): # -> None:
        ...
    
    def test_E(self): # -> None:
        ...
    
    def test_customhdr_jws(self): # -> None:
        ...
    
    def test_customhdr_jws_exists(self): # -> None:
        ...
    
    def test_EdDsa_signing_and_verification(self): # -> None:
        ...
    
    def test_secp256k1_signing_and_verification(self): # -> None:
        ...
    
    def test_brainpool_signing_and_verification(self): # -> None:
        ...
    
    def test_jws_issue_224(self): # -> None:
        ...
    
    def test_jws_issue_281(self): # -> None:
        ...
    
    def test_decrypt_keyset(self): # -> None:
        ...
    


E_A1_plaintext = ...
E_A1_protected = ...
E_A1_key = ...
E_A1_vector = ...
E_A1_ex = ...
E_A2_plaintext = ...
E_A2_protected = ...
E_A2_key = ...
E_A2_vector = ...
E_A2_ex = ...
E_A3_plaintext = ...
E_A3_protected = ...
E_A3_key = ...
E_A3_vector = ...
E_A3_ex = ...
E_A4_protected = ...
E_A4_unprotected = ...
E_A4_vector = ...
E_A4_ex = ...
E_A5_ex = ...
customhdr_jwe_ex = ...
Issue_136_Protected_Header_no_epk = ...
Issue_136_Contributed_JWE = ...
Issue_136_Contributed_Key = ...
E_Ed25519 = ...
X25519_Protected_Header_no_epk = ...
class TestJWE(unittest.TestCase):
    def check_enc(self, plaintext, protected, key, vector): # -> None:
        ...
    
    def test_A1(self): # -> None:
        ...
    
    def test_A2(self): # -> None:
        ...
    
    def test_A3(self): # -> None:
        ...
    
    def test_A4(self): # -> None:
        ...
    
    def test_A5(self): # -> None:
        ...
    
    def test_compact_protected_header(self): # -> None:
        """Compact representation requires a protected header"""
        ...
    
    def test_compact_invalid_header(self): # -> None:
        ...
    
    def test_JWE_Issue_136(self): # -> None:
        ...
    
    def test_customhdr_jwe(self): # -> None:
        ...
    
    def test_customhdr_jwe_exists(self): # -> None:
        ...
    
    def test_X25519_ECDH(self): # -> None:
        ...
    
    def test_decrypt_keyset(self): # -> None:
        ...
    


MMA_vector_key = ...
MMA_vector_ok_cek = ...
MMA_vector_ko_cek = ...
class TestMMA(unittest.TestCase):
    @classmethod
    def setUpClass(cls): # -> None:
        ...
    
    def test_MMA(self): # -> None:
        ...
    


A1_header = ...
A1_claims = ...
A1_token = ...
A2_token = ...
class TestJWT(unittest.TestCase):
    def test_A1(self): # -> None:
        ...
    
    def test_A2(self): # -> None:
        ...
    
    def test_decrypt_keyset(self): # -> None:
        ...
    
    def test_decrypt_keyset_dup_kid(self): # -> None:
        ...
    
    def test_invalid_claim_type(self): # -> None:
        ...
    
    def test_claim_params(self): # -> None:
        ...
    
    def test_claims_typ(self): # -> None:
        ...
    
    def test_empty_claims(self): # -> None:
        ...
    
    def test_Issue_209(self): # -> None:
        ...
    
    def test_Issue_277(self): # -> None:
        ...
    
    def test_unexpected(self): # -> None:
        ...
    


class ConformanceTests(unittest.TestCase):
    def test_unknown_key_params(self): # -> None:
        ...
    
    def test_key_ops_values(self): # -> None:
        ...
    
    def test_jwe_no_protected_header(self): # -> None:
        ...
    
    def test_jwe_no_alg_in_jose_headers(self): # -> None:
        ...
    
    def test_jwe_no_enc_in_jose_headers(self): # -> None:
        ...
    
    def test_aes_128(self): # -> None:
        ...
    
    def test_aes_192(self): # -> None:
        ...
    
    def test_aes_256(self): # -> None:
        ...
    
    def test_jws_loopback(self): # -> None:
        ...
    
    def test_jws_headers_as_dicts(self): # -> None:
        ...
    
    def test_jwe_headers_as_dicts(self): # -> None:
        ...
    
    def test_jwe_default_recipient(self): # -> None:
        ...
    
    def test_none_key(self): # -> None:
        ...
    
    def test_no_default_rsa_1_5(self): # -> None:
        ...
    
    def test_pbes2_hs256_aeskw(self): # -> None:
        ...
    
    def test_pbes2_hs256_aeskw_custom_params(self): # -> None:
        ...
    
    def test_jwe_decompression_max(self): # -> None:
        ...
    


class JWATests(unittest.TestCase):
    def test_jwa_create(self): # -> None:
        ...
    


rfc7797_e_header = ...
rfc7797_u_header = ...
rfc7797_payload = ...
class TestUnencodedPayload(unittest.TestCase):
    def test_regular(self): # -> None:
        ...
    
    def test_compat_unencoded(self): # -> None:
        ...
    
    def test_detached_payload_verification(self): # -> None:
        ...
    
    def test_misses_crit(self): # -> None:
        ...
    
    def test_mismatching_encoding(self): # -> None:
        ...
    


class TestOverloadedOperators(unittest.TestCase):
    def test_jws_equality(self): # -> None:
        ...
    
    def test_jws_representations(self): # -> None:
        ...
    
    def test_jwe_equality(self): # -> None:
        ...
    
    def test_jwe_representations(self): # -> None:
        ...
    
    def test_jwt_equality(self): # -> None:
        ...
    
    def test_jwt_representations(self): # -> None:
        ...
    


