"""
This type stub file was generated by pyright.
"""

from abc import ABCMeta, abstractmethod

default_max_pbkdf2_iterations = ...
class JWAAlgorithm(metaclass=ABCMeta):
    @property
    @abstractmethod
    def name(self): # -> None:
        """The algorithm Name"""
        ...
    
    @property
    @abstractmethod
    def description(self): # -> None:
        """A short description"""
        ...
    
    @property
    @abstractmethod
    def keysize(self): # -> None:
        """The algorithm key size"""
        ...
    
    @property
    @abstractmethod
    def algorithm_usage_location(self): # -> None:
        """One of 'alg', 'enc' or 'JWK'"""
        ...
    
    @property
    @abstractmethod
    def algorithm_use(self): # -> None:
        """One of 'sig', 'kex', 'enc'"""
        ...
    
    @property
    def input_keysize(self): # -> None:
        """The input key size"""
        ...
    


class _RawJWS:
    def sign(self, key, payload):
        ...
    
    def verify(self, key, payload, signature):
        ...
    


class _RawHMAC(_RawJWS):
    def __init__(self, hashfn) -> None:
        ...
    
    def sign(self, key, payload): # -> bytes:
        ...
    
    def verify(self, key, payload, signature): # -> None:
        ...
    


class _RawRSA(_RawJWS):
    def __init__(self, padfn, hashfn) -> None:
        ...
    
    def sign(self, key, payload):
        ...
    
    def verify(self, key, payload, signature): # -> None:
        ...
    


class _RawEC(_RawJWS):
    def __init__(self, curve, hashfn) -> None:
        ...
    
    @property
    def curve(self): # -> Any:
        ...
    
    def sign(self, key, payload): # -> bytes:
        ...
    
    def verify(self, key, payload, signature): # -> None:
        ...
    


class _RawNone(_RawJWS):
    def sign(self, key, payload): # -> Literal['']:
        ...
    
    def verify(self, key, payload, signature): # -> None:
        ...
    


class _HS256(_RawHMAC, JWAAlgorithm):
    name = ...
    description = ...
    keysize = ...
    algorithm_usage_location = ...
    algorithm_use = ...
    def __init__(self) -> None:
        ...
    


class _HS384(_RawHMAC, JWAAlgorithm):
    name = ...
    description = ...
    keysize = ...
    algorithm_usage_location = ...
    algorithm_use = ...
    def __init__(self) -> None:
        ...
    


class _HS512(_RawHMAC, JWAAlgorithm):
    name = ...
    description = ...
    keysize = ...
    algorithm_usage_location = ...
    algorithm_use = ...
    def __init__(self) -> None:
        ...
    


class _RS256(_RawRSA, JWAAlgorithm):
    name = ...
    description = ...
    keysize = ...
    algorithm_usage_location = ...
    algorithm_use = ...
    def __init__(self) -> None:
        ...
    


class _RS384(_RawRSA, JWAAlgorithm):
    name = ...
    description = ...
    keysize = ...
    algorithm_usage_location = ...
    algorithm_use = ...
    def __init__(self) -> None:
        ...
    


class _RS512(_RawRSA, JWAAlgorithm):
    name = ...
    description = ...
    keysize = ...
    algorithm_usage_location = ...
    algorithm_use = ...
    def __init__(self) -> None:
        ...
    


class _ES256(_RawEC, JWAAlgorithm):
    name = ...
    description = ...
    keysize = ...
    algorithm_usage_location = ...
    algorithm_use = ...
    def __init__(self) -> None:
        ...
    


class _ES256K(_RawEC, JWAAlgorithm):
    name = ...
    description = ...
    keysize = ...
    algorithm_usage_location = ...
    algorithm_use = ...
    def __init__(self) -> None:
        ...
    


class _ES384(_RawEC, JWAAlgorithm):
    name = ...
    description = ...
    keysize = ...
    algorithm_usage_location = ...
    algorithm_use = ...
    def __init__(self) -> None:
        ...
    


class _ES512(_RawEC, JWAAlgorithm):
    name = ...
    description = ...
    keysize = ...
    algorithm_usage_location = ...
    algorithm_use = ...
    def __init__(self) -> None:
        ...
    


class _PS256(_RawRSA, JWAAlgorithm):
    name = ...
    description = ...
    keysize = ...
    algorithm_usage_location = ...
    algorithm_use = ...
    def __init__(self) -> None:
        ...
    


class _PS384(_RawRSA, JWAAlgorithm):
    name = ...
    description = ...
    keysize = ...
    algorithm_usage_location = ...
    algorithm_use = ...
    def __init__(self) -> None:
        ...
    


class _PS512(_RawRSA, JWAAlgorithm):
    name = ...
    description = ...
    keysize = ...
    algorithm_usage_location = ...
    algorithm_use = ...
    def __init__(self) -> None:
        ...
    


class _None(_RawNone, JWAAlgorithm):
    name = ...
    description = ...
    keysize = ...
    algorithm_usage_location = ...
    algorithm_use = ...


class _RawKeyMgmt:
    def wrap(self, key, bitsize, cek, headers):
        ...
    
    def unwrap(self, key, bitsize, ek, headers):
        ...
    


class _RSA(_RawKeyMgmt):
    def __init__(self, padfn) -> None:
        ...
    
    def wrap(self, key, bitsize, cek, headers): # -> dict[str, bytes | Any]:
        ...
    
    def unwrap(self, key, bitsize, ek, headers):
        ...
    


class _Rsa15(_RSA, JWAAlgorithm):
    name = ...
    description = ...
    keysize = ...
    algorithm_usage_location = ...
    algorithm_use = ...
    def __init__(self) -> None:
        ...
    
    def unwrap(self, key, bitsize, ek, headers): # -> bytes:
        ...
    


class _RsaOaep(_RSA, JWAAlgorithm):
    name = ...
    description = ...
    keysize = ...
    algorithm_usage_location = ...
    algorithm_use = ...
    def __init__(self) -> None:
        ...
    


class _RsaOaep256(_RSA, JWAAlgorithm):
    name = ...
    description = ...
    keysize = ...
    algorithm_usage_location = ...
    algorithm_use = ...
    def __init__(self) -> None:
        ...
    


class _AesKw(_RawKeyMgmt):
    keysize = ...
    def __init__(self) -> None:
        ...
    
    def wrap(self, key, bitsize, cek, headers): # -> dict[str, bytes | Any]:
        ...
    
    def unwrap(self, key, bitsize, ek, headers): # -> bytes:
        ...
    


class _A128KW(_AesKw, JWAAlgorithm):
    name = ...
    description = ...
    keysize = ...
    algorithm_usage_location = ...
    algorithm_use = ...


class _A192KW(_AesKw, JWAAlgorithm):
    name = ...
    description = ...
    keysize = ...
    algorithm_usage_location = ...
    algorithm_use = ...


class _A256KW(_AesKw, JWAAlgorithm):
    name = ...
    description = ...
    keysize = ...
    algorithm_usage_location = ...
    algorithm_use = ...


class _AesGcmKw(_RawKeyMgmt):
    keysize = ...
    def __init__(self) -> None:
        ...
    
    def wrap(self, key, bitsize, cek, headers): # -> dict[str, bytes | Any | dict[str, str]]:
        ...
    
    def unwrap(self, key, bitsize, ek, headers): # -> bytes:
        ...
    


class _A128GcmKw(_AesGcmKw, JWAAlgorithm):
    name = ...
    description = ...
    keysize = ...
    algorithm_usage_location = ...
    algorithm_use = ...


class _A192GcmKw(_AesGcmKw, JWAAlgorithm):
    name = ...
    description = ...
    keysize = ...
    algorithm_usage_location = ...
    algorithm_use = ...


class _A256GcmKw(_AesGcmKw, JWAAlgorithm):
    name = ...
    description = ...
    keysize = ...
    algorithm_usage_location = ...
    algorithm_use = ...


class _Pbes2HsAesKw(_RawKeyMgmt):
    name = ...
    keysize = ...
    hashsize = ...
    def __init__(self) -> None:
        ...
    
    def wrap(self, key, bitsize, cek, headers): # -> dict[str, bytes | Any]:
        ...
    
    def unwrap(self, key, bitsize, ek, headers): # -> bytes:
        ...
    


class _Pbes2Hs256A128Kw(_Pbes2HsAesKw, JWAAlgorithm):
    name = ...
    description = ...
    keysize = ...
    algorithm_usage_location = ...
    algorithm_use = ...
    hashsize = ...


class _Pbes2Hs384A192Kw(_Pbes2HsAesKw, JWAAlgorithm):
    name = ...
    description = ...
    keysize = ...
    algorithm_usage_location = ...
    algorithm_use = ...
    hashsize = ...


class _Pbes2Hs512A256Kw(_Pbes2HsAesKw, JWAAlgorithm):
    name = ...
    description = ...
    keysize = ...
    algorithm_usage_location = ...
    algorithm_use = ...
    hashsize = ...


class _Direct(_RawKeyMgmt, JWAAlgorithm):
    name = ...
    description = ...
    keysize = ...
    algorithm_usage_location = ...
    algorithm_use = ...
    def wrap(self, key, bitsize, cek, headers): # -> tuple[Any, None] | dict[str, bytes]:
        ...
    
    def unwrap(self, key, bitsize, ek, headers): # -> bytes:
        ...
    


class _EcdhEs(_RawKeyMgmt, JWAAlgorithm):
    name = ...
    description = ...
    algorithm_usage_location = ...
    algorithm_use = ...
    keysize = ...
    def __init__(self) -> None:
        ...
    
    def wrap(self, key, bitsize, cek, headers): # -> dict[str, bytes] | dict[str, bytes | Any]:
        ...
    
    def unwrap(self, key, bitsize, ek, headers): # -> bytes:
        ...
    


class _EcdhEsAes128Kw(_EcdhEs):
    name = ...
    description = ...
    keysize = ...
    algorithm_usage_location = ...
    algorithm_use = ...


class _EcdhEsAes192Kw(_EcdhEs):
    name = ...
    description = ...
    keysize = ...
    algorithm_usage_location = ...
    algorithm_use = ...


class _EcdhEsAes256Kw(_EcdhEs):
    name = ...
    description = ...
    keysize = ...
    algorithm_usage_location = ...
    algorithm_use = ...


class _EdDsa(_RawJWS, JWAAlgorithm):
    name = ...
    description = ...
    algorithm_usage_location = ...
    algorithm_use = ...
    keysize = ...
    def sign(self, key, payload):
        ...
    
    def verify(self, key, payload, signature):
        ...
    


class _RawJWE:
    def encrypt(self, k, aad, m):
        ...
    
    def decrypt(self, k, aad, iv, e, t):
        ...
    


class _AesCbcHmacSha2(_RawJWE):
    keysize = ...
    def __init__(self, hashfn) -> None:
        ...
    
    def encrypt(self, k, aad, m): # -> tuple[bytes, bytes, bytes]:
        """ Encrypt according to the selected encryption and hashing
        functions.

        :param k: Encryption key
        :param aad: Additional Authentication Data
        :param m: Plaintext

        Returns a dictionary with the computed data.
        """
        ...
    
    def decrypt(self, k, aad, iv, e, t): # -> bytes:
        """ Decrypt according to the selected encryption and hashing
        functions.
        :param k: Encryption key
        :param aad: Additional Authenticated Data
        :param iv: Initialization Vector
        :param e: Ciphertext
        :param t: Authentication Tag

        Returns plaintext or raises an error
        """
        ...
    


class _A128CbcHs256(_AesCbcHmacSha2, JWAAlgorithm):
    name = ...
    description = ...
    keysize = ...
    algorithm_usage_location = ...
    algorithm_use = ...
    def __init__(self) -> None:
        ...
    


class _A192CbcHs384(_AesCbcHmacSha2, JWAAlgorithm):
    name = ...
    description = ...
    keysize = ...
    algorithm_usage_location = ...
    algorithm_use = ...
    def __init__(self) -> None:
        ...
    


class _A256CbcHs512(_AesCbcHmacSha2, JWAAlgorithm):
    name = ...
    description = ...
    keysize = ...
    algorithm_usage_location = ...
    algorithm_use = ...
    def __init__(self) -> None:
        ...
    


class _AesGcm(_RawJWE):
    keysize = ...
    def __init__(self) -> None:
        ...
    
    def encrypt(self, k, aad, m): # -> tuple[bytes, bytes, bytes]:
        """ Encrypt according to the selected encryption and hashing
        functions.

        :param k: Encryption key
        :param aad: Additional Authentication Data
        :param m: Plaintext

        Returns a dictionary with the computed data.
        """
        ...
    
    def decrypt(self, k, aad, iv, e, t): # -> bytes:
        """ Decrypt according to the selected encryption and hashing
        functions.
        :param k: Encryption key
        :param aad: Additional Authenticated Data
        :param iv: Initialization Vector
        :param e: Ciphertext
        :param t: Authentication Tag

        Returns plaintext or raises an error
        """
        ...
    


class _A128Gcm(_AesGcm, JWAAlgorithm):
    name = ...
    description = ...
    keysize = ...
    algorithm_usage_location = ...
    algorithm_use = ...


class _A192Gcm(_AesGcm, JWAAlgorithm):
    name = ...
    description = ...
    keysize = ...
    algorithm_usage_location = ...
    algorithm_use = ...


class _A256Gcm(_AesGcm, JWAAlgorithm):
    name = ...
    description = ...
    keysize = ...
    algorithm_usage_location = ...
    algorithm_use = ...


class _BP256R1(_RawEC, JWAAlgorithm):
    name = ...
    description = ...
    keysize = ...
    algorithm_usage_location = ...
    algorithm_use = ...
    def __init__(self) -> None:
        ...
    


class _BP384R1(_RawEC, JWAAlgorithm):
    name = ...
    description = ...
    keysize = ...
    algorithm_usage_location = ...
    algorithm_use = ...
    def __init__(self) -> None:
        ...
    


class _BP512R1(_RawEC, JWAAlgorithm):
    name = ...
    description = ...
    keysize = ...
    algorithm_usage_location = ...
    algorithm_use = ...
    def __init__(self) -> None:
        ...
    


class JWA:
    """JWA Signing Algorithms.

    This class provides access to all JWA algorithms.
    """
    algorithms_registry = ...
    @classmethod
    def instantiate_alg(cls, name, use=...): # -> _A128CbcHs256 | _A128Gcm | _A128GcmKw | _A128KW | _A192CbcHs384 | _A192Gcm | _A192GcmKw | _A192KW | _A256CbcHs512 | _A256Gcm | _A256GcmKw | _A256KW | _BP256R1 | _BP384R1 | _BP512R1 | _Direct | _ES256 | _ES256K | _ES384 | _ES512 | _EcdhEs | _EcdhEsAes128Kw | _EcdhEsAes192Kw | _EcdhEsAes256Kw | _EdDsa | _HS256 | _HS384 | _HS512 | _None | _PS256 | _PS384 | _PS512 | _Pbes2Hs256A128Kw | _Pbes2Hs384A192Kw | _Pbes2Hs512A256Kw | _RS256 | _RS384 | _RS512 | _Rsa15 | _RsaOaep | _RsaOaep256:
        ...
    
    @classmethod
    def signing_alg(cls, name): # -> _A128CbcHs256 | _A128Gcm | _A128GcmKw | _A128KW | _A192CbcHs384 | _A192Gcm | _A192GcmKw | _A192KW | _A256CbcHs512 | _A256Gcm | _A256GcmKw | _A256KW | _BP256R1 | _BP384R1 | _BP512R1 | _Direct | _ES256 | _ES256K | _ES384 | _ES512 | _EcdhEs | _EcdhEsAes128Kw | _EcdhEsAes192Kw | _EcdhEsAes256Kw | _EdDsa | _HS256 | _HS384 | _HS512 | _None | _PS256 | _PS384 | _PS512 | _Pbes2Hs256A128Kw | _Pbes2Hs384A192Kw | _Pbes2Hs512A256Kw | _RS256 | _RS384 | _RS512 | _Rsa15 | _RsaOaep | _RsaOaep256:
        ...
    
    @classmethod
    def keymgmt_alg(cls, name): # -> _A128CbcHs256 | _A128Gcm | _A128GcmKw | _A128KW | _A192CbcHs384 | _A192Gcm | _A192GcmKw | _A192KW | _A256CbcHs512 | _A256Gcm | _A256GcmKw | _A256KW | _BP256R1 | _BP384R1 | _BP512R1 | _Direct | _ES256 | _ES256K | _ES384 | _ES512 | _EcdhEs | _EcdhEsAes128Kw | _EcdhEsAes192Kw | _EcdhEsAes256Kw | _EdDsa | _HS256 | _HS384 | _HS512 | _None | _PS256 | _PS384 | _PS512 | _Pbes2Hs256A128Kw | _Pbes2Hs384A192Kw | _Pbes2Hs512A256Kw | _RS256 | _RS384 | _RS512 | _Rsa15 | _RsaOaep | _RsaOaep256:
        ...
    
    @classmethod
    def encryption_alg(cls, name): # -> _A128CbcHs256 | _A128Gcm | _A128GcmKw | _A128KW | _A192CbcHs384 | _A192Gcm | _A192GcmKw | _A192KW | _A256CbcHs512 | _A256Gcm | _A256GcmKw | _A256KW | _BP256R1 | _BP384R1 | _BP512R1 | _Direct | _ES256 | _ES256K | _ES384 | _ES512 | _EcdhEs | _EcdhEsAes128Kw | _EcdhEsAes192Kw | _EcdhEsAes256Kw | _EdDsa | _HS256 | _HS384 | _HS512 | _None | _PS256 | _PS384 | _PS512 | _Pbes2Hs256A128Kw | _Pbes2Hs384A192Kw | _Pbes2Hs512A256Kw | _RS256 | _RS384 | _RS512 | _Rsa15 | _RsaOaep | _RsaOaep256:
        ...
    


